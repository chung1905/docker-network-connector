#!/usr/bin/env bash
set -euo pipefail

readonly main_con_name=caddy

log() {
    echo "$(date -R)": "$@"
}

is_docker_container_exists() {
    docker container inspect -- "$1" > /dev/null 2>&1
    return $?
}

is_joinable() {
    if ! is_docker_container_exists "$2"
    then
        log warn: container "$2" not exists
        return 1
    fi

    local tmp
    tmp=$(docker container inspect "$2" --format "{{index .NetworkSettings.Networks \"$1\"}}")
    if [ "$tmp" != "<nil>" ]
    then
        return 1
    fi

    return 0
}

list_network() {
    docker network ls --format '{{.Name}}' --filter driver=bridge | (grep -vx -- bridge || true)
}

is_docker_network_exists() {
    local n
    n=$(list_network | grep -x "$1")
    if [ "$n" == "" ]
    then
        return 1
    fi
    return 0
}

docker_network_join() {
    if ! is_joinable "$1" "$2"
    then
        log skip: "$2" already connected to "$1"
        return 0
    fi

    docker network connect -- "$1" "$2"
    log connect: "$2" to "$1"
}

docker_network_disconnect_if_alone() {
    if [ "${main_con_name}_default" == "$1" ]
    then
        log skip: "$1" is default network
        return 0
    fi

    if ! is_docker_container_exists "$2"
    then
        log warn: container "$2" not exists
        return 0
    fi

    if ! is_docker_network_exists "$1"
    then
        log skip: network "$1" not exists
        return 0
    fi

    local con_name
    con_name=$(docker network inspect -f "{{ range .Containers }}{{ .Name }}{{ end }}" -- "$1")
    if [ "$con_name" == "$2" ]
    then
        docker network disconnect -- "$1" "$2"
        log disconnect: "$2" from "$1"
    fi
}

before_watch() {
    list_network | while read -r network; do
        docker_network_disconnect_if_alone "$network" $main_con_name
    done

    log prune: "$(docker network prune -f | tr '\n' ' ')"

    list_network | while read -r network; do
        docker_network_join "$network" $main_con_name
    done
}

before_watch

readonly event_format='{{if .Action}}{{slice .Action 0 1}} {{.Actor.Attributes.name}}{{end}}'
log "info: Waiting event..."

###
# Listen to 'connect' instead of 'create' because 'create' is quite buggy
# Some weird 'disconnect' events is fired after a network is just created
#
# Tested on a low-end computer:
# ~$ docker -v
# Docker version 20.10.11, build dea9396
# ~$ docker compose version
# Docker Compose version v2.1.1
###

docker events -f type=network -f event=connect -f event=disconnect --format "$event_format" | \
while read -r event; do
    e=${event::1}
    id=${event:2}
    case $e in
        c)
            docker_network_join "$id" $main_con_name
            ;;
        d)
            docker_network_disconnect_if_alone "$id" $main_con_name
            ;;
        *)
            log error: Unknown event \'"$event"\'
    esac
done
