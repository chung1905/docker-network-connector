#!/usr/bin/env bash
set -euo pipefail

readonly main_con_name=caddy

log() {
	echo "$(date -R)": "$@"
}

is_joined() {
	local tmp
	tmp=$(docker inspect "$2" --format "{{index .NetworkSettings.Networks \"$1\"}}")
	if [ "$tmp" == "<nil>" ]
	then
		return 1
	fi
	return 0
}

docker_network_join() {
	if is_joined "$1" "$2"
	then
		log skip: "$2" already connected to "$1"
		return 0
	fi

	docker network connect -- "$1" "$2"
	log connect: "$2" to "$1"
}

docker_network_disconnect_if_alone() {
	local con_name
	con_name=$(docker network inspect -f "{{ range .Containers }}{{ .Name }}{{ end }}" -- "$1")
	if [ "$con_name" == "$2" ]
	then
		docker network disconnect -- "$1" "$2"
		log disconnect: "$2" from "$1"
	fi
}

list_network() {
	docker network ls --format '{{.Name}}' --filter driver=bridge | (grep -vx -- bridge || true)
}

before_watch() {
	list_network | while read -r network; do
		docker_network_disconnect_if_alone "$network" $main_con_name
	done

	log prune "$(docker network prune -f)"

	list_network | while read -r network; do
		docker_network_join "$network" $main_con_name
	done
}

before_watch

readonly event_format='{{if .Action}}{{slice .Action 0 1}} {{.Actor.Attributes.name}}{{end}}'
log "info: Waiting event..."
docker events -f type=network -f event=create -f event=disconnect --format "$event_format" | \
while read -r event; do
	e=${event::1}
	id=${event:2}
	case $e in
		c)
			docker_network_join "$id" $main_con_name
			;;
		d)
			docker_network_disconnect_if_alone "$id" $main_con_name
			;;
		*)
			log error: Unknown event \'"$event"\'
	esac
done
